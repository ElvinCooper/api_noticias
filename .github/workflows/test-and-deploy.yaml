name: Test and Deploy

on: 
  push:
    branches: ["main"]
  
  pull_request:  

jobs: 
  test-and-deploy:
    runs-on: ubuntu-latest
    services: 
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: infonovax
          POSTGRES_PASSWORD: info12345
          POSTGRES_DB: midb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SQLALCHEMY_DATABASE_URI: postgresql://infonovax:info12345@localhost:5432/midb

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up python
        uses: actions/setup-python@v4  
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt    

      - name: Run DB migrations
        run: flask db upgrade
    

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run Flask manually in background with log
        run: |
          python app.py > flask.log 2>&1 &
          sleep 5
          echo "===== LOG DE FLASK ====="
          cat flask.log
    

      - name: Wait for server to start
        run: |
          echo "Esperando que Flask arranque..."
          for i in {1..10}; do
            curl -s http://localhost:5000/ && break || sleep 1
          done  


      - name: Run StepCI tests via NPX
        run: npx stepci run test-register-login.yml

      - name: Deploy to render (si pasan los tests)  
        if: success() && github.ref == 'refs/heads/main'
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK}}

      - name: Notify Slack - Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ Tests pasaron y el deploy fue iniciado correctamente a Render."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack - Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"❌ Los tests fallaron. No se hizo deploy. Revisa el workflow en GitHub Actions."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}    



