name: Test and Deploy

on: 
  pull_request:
    branches: ["main"]  

  push:
    branches:
      - main  
      
permissions:
  contents: read      

jobs: 
  test-and-deploy:
    runs-on: ubuntu-latest
    services: 
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    #env:
     # SQLALCHEMY_DATABASE_URI: ${{ secrets.SQLALCHEMY_DATABASE_URI }} 
    env:
      SQLALCHEMY_DATABASE_URI: postgresql://postgres:postgres@localhost:5432/postgres
 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up python
        uses: actions/setup-python@v5  
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip          
          pip install -r requirements.txt    
     

   
      - name: Wait for PostgreSQL
        run: |
          echo "Esperando a que PostgreSQL este listo..."
          # Intenta conectarse al puerto 5432 del servicio 'postgres'
         

          for i in $(seq 1 30); do
            nc -vz localhost 5432 && break # <--- CAMBIADO 'postgres' a 'localhost'
            echo "PostgreSQL is still unavailable - sleeping for 1 second..."
            sleep 1
          done

          # Verificar si la conexiÃ³n fue exitosa despuÃ©s de los intentos
          if ! nc -vz localhost 5432; then # <--- CAMBIADO 'postgres' a 'localhost'
            echo "PostgreSQL no estuvo listo a tiempo. Exiting."
            exit 1
          fi
          echo "PostgreSQL is up and running!"



      - name: Run DB migrations
        run: flask db upgrade
    

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'


      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # - name: Install StepCI locally (dev dependency)
      #   run: npm install stepci@2.8.2 --save-dev    


      - name: Install StepCI globally
        run: npm install -g stepci@2.8.2


      - name: Run Flask manually in background with log
        run: |
          python app.py > flask.log 2>&1 &
          sleep 5
              

      - name: Esperar a que inicie el servidor de flask
        run: |
          echo "Esperando que Flask arranque..."
          for i in {1..10}; do
            curl -s http://localhost:5000/ && break || sleep 1
          done            
      
      - name: Run StepCI tests
        run: stepci run test-register-login.yml      

      - name: Deploy to render (si pasan los tests y la rama es main)  
        if: success() && github.ref == 'refs/heads/main'   
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

      - name: Send Gmail Notification - Success
        if: success() && github.ref == 'refs/heads/main'
        uses: dawidd6/action-send-mail@v3
        with:
            server_address: smtp.gmail.com
            server_port: 465
            secure: true
            username: ${{ secrets.GMAIL_USERNAME }}
            password: ${{ secrets.GMAIL_APP_PASSWORD }}
            subject: 'âœ… [CI/CD] Deploy exitoso en main'
            to: ${{ secrets.GMAIL_USERNAME }}
            from: ${{ secrets.GMAIL_USERNAME }}
            body: |
              Hola Elvin ðŸ‘‹,

                âœ… Los tests pasaron y el deploy fue iniciado correctamente a Render desde la rama `main`.

              Revisa GitHub Actions para mÃ¡s detalles:
              ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}




