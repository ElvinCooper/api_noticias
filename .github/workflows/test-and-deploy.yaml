name: Test and Deploy

on: 
  pull_request:
    branches: ["main"]  

  push:
    branches:
      - main  
      
permissions:
  contents: read      

jobs: 
  test-and-deploy:
    runs-on: ubuntu-latest
    services: 
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SQLALCHEMY_DATABASE_URI: postgresql://infonovax:info12345@localhost:5432/midb

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up python
        uses: actions/setup-python@v5  
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip          
          pip install -r requirements.txt    
     

   
      - name: Wait for PostgreSQL
        run: |
          echo "Esperando a que PostgreSQL este listo..."
          # Intenta conectarse al puerto 5432 del servicio 'postgres'
         

          for i in $(seq 1 30); do
            nc -vz localhost 5432 && break # <--- CAMBIADO 'postgres' a 'localhost'
            echo "PostgreSQL is still unavailable - sleeping for 1 second..."
            sleep 1
          done

          # Verificar si la conexión fue exitosa después de los intentos
          if ! nc -vz localhost 5432; then # <--- CAMBIADO 'postgres' a 'localhost'
            echo "PostgreSQL no estuvo listo a tiempo. Exiting."
            exit 1
          fi
          echo "PostgreSQL is up and running!"



      - name: Run DB migrations
        run: flask db upgrade
    

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install StepCI locally (dev dependency)
        run: npm install stepci@2.8.2 --save-dev    

      - name: Run Flask manually in background with log
        run: |
          python app.py > flask.log 2>&1 &
          sleep 5
              

      - name: Esperar a que inicie el servidor de flask
        run: |
          echo "Esperando que Flask arranque..."
          for i in {1..10}; do
            curl -s http://localhost:5000/ && break || sleep 1
          done            

      - name: Run StepCI tests via NPX
        run: npx stepci run test-register-login.yml

      - name: Deploy to render (si pasan los tests y la rama es main)  
        if: success() && github.ref == 'refs/heads/main'   
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

      - name: Notify Slack - Success
        if: success() && github.ref == 'refs/heads/main'
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ Los Tests pasaron y el deploy fue iniciado correctamente a Render."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack - Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"❌ Los tests fallaron. No se hizo deploy. Revisa el workflow en GitHub Actions."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}    



